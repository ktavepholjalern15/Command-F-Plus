

import java.util.Scanner;
import java.util.ArrayList;
/*import java.io.File;
import java.io.IOException;
import java.io.*;
import java.io.BufferedReader;
import java.io.FileReader;*/

public class commandFplus
{
 
  public static String strip(String str)//should return the modified string with only single spaces and lower cased letters, and no numbers
  {
    str = str.toLowerCase();
    String alphaAndSpaces = "abcdefghijklmnopqrstuvwxyz ";
    String alphaChecked = "";
    for(int i = 0; i < str.length(); i++)
    {
      if(alphaAndSpaces.indexOf(str.substring(i,i+1)) == -1)//if there is anything other than letters and spaces, delete
        alphaChecked += "";
      else
        alphaChecked += str.substring(i,i+1);//otherwise keep the letters
      }
    
    for(int i = 0; i < str.length() - 1; i++)
    {
      if(alphaChecked.substring(i,i+2).equals("  "))//if the two characters are spaces, delete one
        alphaChecked = alphaChecked.substring(0,i) + alphaChecked.substring(i+1);
      else
        alphaChecked = alphaChecked;
    }
    
    return alphaChecked;
  }
  
  public static ArrayList<String> toArray(String str)
  {
    String intermediate = "";
    ArrayList<String> individualWords= new ArrayList<String>();
    
    if(!(str.substring(str.length()-1).equals(" ")))
      str += " ";
    
    if(str.substring(0,1).equals(" "))
      str = str.substring(1,str.length());
    
    while(str.length() > 0 && str.indexOf(" ") != -1)
    {
      int i = str.indexOf(" ");
      individualWords.add(str.substring(0,i));
      intermediate += str.substring(i+1);
      str = intermediate;
      intermediate = "";
    }
    
    //when it no longer has
    return individualWords;
  }


  
  //public static Arraylist<String> okWords()//prompts the player 
  //{
    
  //}
  
  public ArrayList<String> selectionSort(ArrayList <String> list){
    int min; 
    String temp;
    
    for (int outer = 0; outer < list.size() - 1; outer++){
      min = outer;
      for (int inner = outer + 1; inner < list.size(); inner++){
        if (list.get(inner).compareTo(list.get(min)) == -1) {
          min = inner; // a new smallest item is found
        }
      }
      //swap list[outer] & list[min]
      temp = list.get(outer);
      list.set(outer, list.get(min));
      list.set(min, temp);
    }
    return list;
  }

  //public static String[] mostCommonWords()
  //{
    
  //}
}